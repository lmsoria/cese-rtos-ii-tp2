#pragma once

#include "stdbool.h"
#include "stddef.h"
#include "stdint.h"

/// @brief Available UART instances. This is HW dependant
typedef enum
{
	UART_INSTANCE_1 = 0,
	UART_INSTANCE_TOTAL ///< Total amount of uart instances. Keep this value always at the bottom!
} UARTInstance;

/// @brief List of common baudrates.
typedef enum
{
	BAUD_9600 = 9600,     ///< 9600 bauds.
	BAUD_19200 = 19200,   ///< 19200 bauds.
	BAUD_31250 = 31250,   ///< 31250 bauds. Used for MIDI devices
	BAUD_38400 = 38400,   ///< 38400 bauds.
	BAUD_115200 = 115200, ///< 115200 bauds.
} UARTBaudRate;

/// @brief Possible data length options
typedef enum
{
	DATA_BITS_8 = 8, ///< 8 bits.
	DATA_BITS_9 = 9, ///< 9 bits.
} UARTDataBits;

/// @brief Possible stop bits options
typedef enum
{
	STOP_BITS_1 = 1, ///< 1 stop bit per frame.
	STOP_BITS_2 = 2, ///< 2 stop bits per frame.
} UARTStopBits;

/// @brief Parity
typedef enum
{
	PARITY_NONE = 0, ///< No parity.
	PARITY_EVEN,     ///< Even parity.
	PARITY_ODD,      ///< Odd parity.
} UARTParity;

/// @brief Callback function used for notifying that transmission/reception has finished
typedef void (*uart_callback_t)(UARTInstance);

typedef void (*ao_led_task_handler_t)(void*);

/// @brief Struct that holds the UART configuration.
typedef struct
{
	UARTInstance instance;            ///< Instance.
	UARTBaudRate baudrate;            ///< Baudrate. Can be one of the list or any uint32_t number.
	UARTDataBits data_bits;           ///< Data bits.
	UARTStopBits stop_bits;           ///< Stop bits.
	UARTParity parity;                ///< Parity.
	uart_callback_t tx_done_callback; ///< Callback triggered every time a UART transmission ends.
	uart_callback_t rx_done_callback; ///< Callback triggered every time a UART reception ends. The reception buffer must be read here.
} UARTConfig;

/// @brief UART IRQ handler. Must be invoked inside `U(S)ARTx_IRQHandler()` functions generated by the IDE.
///        The `HAL_UART_IRQHandler()` call must be commented out.
/// @param instance To see which instance must be passed as argument, refer to `UART_INSTANCES` array inside `API_uart.c`
void uart_irq_handler(UARTInstance instance);

/// @brief Initializes the specified UART
/// @param config UART configuration.
/// @return `true` if the initialization was successful. `false` otherwise.
bool uart_init(UARTConfig* config);

/// @brief Send `size` bytes of a givent array over the desired instance
/// @param instance UART instance.
/// @param p_data pointer to the data.
/// @param size bytes to be sent.
void uart_send(UARTInstance instance, uint8_t* p_data, size_t size);

/// @brief Receive `size` bytes from the UART RX's buffer and store them. Since the
///        reception is interrupt-driven, the client will be notified on the instance's `rx_done_callback`.
/// @param instance UART instance.
/// @param p_data Address where received data should be stored
/// @param size Number of bytes to be read.
void uart_receive(UARTInstance instance, uint8_t* p_data, size_t size);
